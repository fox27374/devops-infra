---
- name: Setup Guacamole
  ansible.builtin.command:
    cmd: bash /opt/setup/setup_guacamole.sh
  
- name: Remove guacamole config files
  ansible.builtin.file:
    path: /opt/setup/guacamole
    state: absent
  become: true

- name: Create directory for guacamole config files
  ansible.builtin.file:
    path: /opt/setup/guacamole
    state: directory
    mode: '0755'
  become: true

# - name: Initialize an empty list for lab host IP addresses
#   set_fact:
#     lab_ips: []

# - name: Add each lab host's IP to the list
#   set_fact:
#     lab_ips: "{{ lab_ips + [hostvars[item]['ansible_host'] | default(item)] }}"
#   loop: "{{ groups['lab'] }}"

- name: Create salt and password hash
  ansible.builtin.command:
    argv:
      - python
      - ../bastion/files/gen_guac_hash.py
      - "{{ guacamole_pw }}"
  delegate_to: localhost
  run_once: true
  register: hash_script_output

- name: Parse script output into multiple facts
  set_fact:
    guac_hashes: "{{ guac_hashes | default({}) | combine({ item.split('=')[0]: item.split('=')[1] }) }}"
  with_items: "{{ hash_script_output.stdout_lines }}"

- name: Render entity json
  become: true
  ansible.builtin.template:
    src: guac_entity.j2
    dest: /opt/setup/guacamole/guac_entity.json
    owner: root
    group: root
    mode: '0644'

- name: Render user group json
  become: true
  ansible.builtin.template:
    src: guac_user_group.j2
    dest: /opt/setup/guacamole/guac_user_group.json
    owner: root
    group: root
    mode: '0644'

- name: Render user json
  become: true
  ansible.builtin.template:
    src: guac_user.j2
    dest: /opt/setup/guacamole/guac_user.json
    owner: root
    group: root
    mode: '0644'

- name: Render connection group json
  become: true
  ansible.builtin.template:
    src: guac_connection_group.j2
    dest: /opt/setup/guacamole/guac_connection_group.json
    owner: root
    group: root
    mode: '0644'

- name: Render connection json
  become: true
  ansible.builtin.template:
    src: guac_connection.j2
    dest: /opt/setup/guacamole/guac_connection.json
    owner: root
    group: root
    mode: '0644'

- name: Render connection parameter json
  become: true
  ansible.builtin.template:
    src: guac_connection_parameter.j2
    dest: /opt/setup/guacamole/guac_connection_parameter.json
    owner: root
    group: root
    mode: '0644'

- name: Render connection permission json
  become: true
  ansible.builtin.template:
    src: guac_connection_permission.j2
    dest: /opt/setup/guacamole/guac_connection_permission.json
    owner: root
    group: root
    mode: '0644'

- name: Render connection group permission json
  become: true
  ansible.builtin.template:
    src: guac_connection_group_permission.j2
    dest: /opt/setup/guacamole/guac_connection_group_permission.json
    owner: root
    group: root
    mode: '0644'

- name: Register postgrest service IP
  ansible.builtin.command:
    cmd: kubectl get svc postgrest -n guacamole -o jsonpath='{.spec.clusterIP}'
  register: postgrest_ip

- name: Register postgrest service port
  ansible.builtin.command:
    cmd: kubectl get svc postgrest -n guacamole -o jsonpath='{.spec.ports[0].port}'
  register: postgrest_port

- name: Wait until HTTP status is 200
  ansible.builtin.uri:
    url: 'http://{{ postgrest_ip.stdout }}:{{ postgrest_port.stdout }}'
    return_content: yes
    status_code:
      - 200
  until: uri_output.status == 200
  retries: 10 # Retries for 10 * 2 seconds
  delay: 2 # Every 2 seconds
  register: uri_output

- name: Execute guacamole install script
  ansible.builtin.command:
    cmd: bash /opt/setup/config_guacamole.sh
